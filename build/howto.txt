Добавление нового java-модуля.

Пусть модуль называется newModule. Нужно выполнить следующие шаги: 
  - создать директорию newModule внутри директории ./dev (далее директорию ./dev/newModule будем называть базовой директорией модуля)
  - создать в базовой директории модуля директорию src для исходного кода
  - по необходимости создать в базовой директории модуля директорию tests, в поддиректориях которой будет находится
    исходный код различных тестов модуля
  - по необходимости создать в базовой директории модуля директорию resources для "компилируемых" ресурсов
  - скопировать в базовую директорию модуля шаблоны файлов build.xml, buildInfo.xml, customBuild.xml из директории ./build/templates
  - заменить в этих файлах все вхождения строки ${MODULE_NAME} на newModule
  - в получившемся файле customBuild.xml следует:
    - задать набор используемых библиотек, используя ссылки на библиотеки, описанные
      в файле ./common.xml. Например так:
        <patternset id="newModule.libraries">
          <patternset refid="lib1.library"/>
          <patternset refid="lib2.library"/>
        </patternset>
    - задать список модулей, от которых будет зависеть создаваемый модуль.
      Например так:
         <property name="newModule.deps" value="module1,module2"/>
      Если зависимостей нет, список следует оставить пустым.
    - задать имя запускаемого класса.
      Например так:
         <property name="newModule.mainclass" value="com.Starter"/>
      Если запускаемого класса нет, следует задать пустое значение.
    - задать список файлов (возможно использование wildcards), которые вы хотите исключить из компиляции
      Например так:
         <property name="newModule.excludeFromCompile" value="
                        my/pkg/cls.java, 
                        my/another/pkg/**"/>
    - задать список файлов (возможно использование wildcards), которые вы хотите исключить из компиляции тестов
      Например так:
         <property name="newModule.excludeTestsFromCompile" value="
                        my/pkg/testCase.java, 
                        my/another/pkg/**"/>
    - определить дополнительные действия, которые будут выполнятся непосредственно перед изготовлением дистрибутива модуля
      Например так:

      <target name="newModule.distribTarget"/>
        <mkdir dir="${project.distrib.conf.dir}"/>

        <copy todir="${project.distrib.conf.dir}">
          <fileset dir="${project.runtime.conf.dir}">
            <include name="config.xml"/>
          </fileset>
        </copy>
      </target>
      После исполнения приведенного фрагмента в директории ./distrib будет создана папка ./conf,
      в которую будет скопирован файл config.xml, расположенный в директории ./runtime/conf (все значения 
      используемых в примере свойств определены в файле ./common.xml)
  - в файле ./common.xml в список modules.list следует добавить значение newModule

Все шаги, кроме настроек файла customBuild.xml будут автоматически выполнены,
если запустить из корневой директории проекта следующее:

  ant addJavaModules -DmoduleNames="module1,module2...,moduleN"

Этот вызов создаст для указанных модулей директории, положит в них файлы build.xml и buildInfo.xml и произведет
соответствующие замены. При этом файл customBuild.xml не будет создаваться. Для того, чтобы его создать, нужно 
дополнительно указывать -DreplaceCustomBuild=true. Для того, чтобы в директории каждого модуля создавалась
директория resources, нужно дополнительно указывать -DcreateResources=true.

