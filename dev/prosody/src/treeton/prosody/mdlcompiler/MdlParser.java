
/*
 * Copyright Anatoly Starostin (c) 2017.
 */

//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Mar 20 02:24:17 MSK 2017
//----------------------------------------------------

package treeton.prosody.mdlcompiler;

import java.io.*;
import treeton.prosody.mdlcompiler.grammar.ast.*;
import treeton.prosody.mdlcompiler.grammar.*;
import treeton.prosody.mdlcompiler.*;
import java_cup.runtime.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;

/** CUP v0.10k generated parser.
  * @version Mon Mar 20 02:24:17 MSK 2017
  */
public class MdlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MdlParser() {super();}

  /** Constructor which sets the default scanner. */
  public MdlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static short _production_table[][];

  /** Access to production table. */
  public short[][] production_table() {
    if(_production_table == null) {
      try {
        ObjectInputStream ois = new ObjectInputStream(
               this.getClass().getResourceAsStream("prod-table.data"));
        _production_table = (short[][]) ois.readObject();
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    return _production_table;
  }

  /** Parse-action table. */
  protected static short[][] _action_table;

  /** Access to parse-action table. */
  public short[][] action_table() {
    if(_action_table == null) {
      try {
        ObjectInputStream ois = new ObjectInputStream(
               this.getClass().getResourceAsStream("action-table.data"));
        _action_table = (short[][]) ois.readObject();
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    return _action_table;
  }

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\010\003\005\004\003\005\004\001\001\000" +
    "\004\005\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\020\007" +
    "\014\010\017\011\012\012\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\024\010\017\011\012\012\013\013\023\014\026\015" +
    "\030\016\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\037\016\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\033\014\026\015" +
    "\030\016\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\036\015\030\016\027\001\001\000\006\015" +
    "\037\016\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MdlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MdlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MdlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private File grammarFile;
  private MdlCompiler mdlCompiler;
  private String grammarBody;
  
  public MdlParser(File grammarFile, MdlCompiler mdlCompiler, String encoding) throws IOException {
      InputStream is = new FileInputStream(grammarFile);
      byte[] buf = new byte[(int) grammarFile.length()];
      is.read(buf, 0, buf.length);
      is.close();

      MdlLexer scanner = (encoding == null || encoding.trim().length()==0)?
                          new MdlLexer(new InputStreamReader(new ByteArrayInputStream(buf))) :
                          new MdlLexer(new InputStreamReader(new ByteArrayInputStream(buf), encoding));
      setScanner(scanner);

      if (encoding != null)
          this.grammarBody = new String(buf, encoding);
      else
          this.grammarBody = new String(buf);

      this.grammarFile = grammarFile;
      this.mdlCompiler = mdlCompiler;
  }
  
  public String getGrammarBody() {
    return grammarBody;
  }

  public File getGrammarFile() {
    return this.grammarFile;
  }

  public MdlCompiler getMdlCompiler() {
    return this.mdlCompiler;
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append(this.grammarFile.getPath() +
               " ("+((java_cup.runtime.Symbol)info).value.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MdlParser$actions {
  private final MdlParser parser;

  /** Constructor */
  CUP$MdlParser$actions(MdlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MdlParser$do_action(
    int                        CUP$MdlParser$act_num,
    java_cup.runtime.lr_parser CUP$MdlParser$parser,
    java.util.Stack            CUP$MdlParser$stack,
    int                        CUP$MdlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MdlParser$result;

      /* select the action based on the action number */
      switch (CUP$MdlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SyllBasicPatternElement ::= UNSTRESSED 
            {
              SyllBasicPatternElement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllBasicPatternElement(e1); 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(12/*SyllBasicPatternElement*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SyllBasicPatternElement ::= OBLIGATORY_UNSTRESSED 
            {
              SyllBasicPatternElement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllBasicPatternElement(e1); 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(12/*SyllBasicPatternElement*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SyllBasicPatternElement ::= STRESSED 
            {
              SyllBasicPatternElement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllBasicPatternElement(e1); 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(12/*SyllBasicPatternElement*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SyllBasicPatternElement ::= OBLIGATORY_STRESSED 
            {
              SyllBasicPatternElement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllBasicPatternElement(e1); 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(12/*SyllBasicPatternElement*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SyllConstraint ::= LPAREN SyllConstraintOr RPAREN QUESTION 
            {
              SyllConstraint RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		SyllConstraintOr e2 = (SyllConstraintOr)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		TreevialSymbol e3 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e4 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllConstraint(e1, e2, e3, e4); e2.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(11/*SyllConstraint*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SyllConstraint ::= LPAREN SyllConstraintOr RPAREN PLUS 
            {
              SyllConstraint RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		SyllConstraintOr e2 = (SyllConstraintOr)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		TreevialSymbol e3 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e4 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllConstraint(e1, e2, e3, e4); e2.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(11/*SyllConstraint*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SyllConstraint ::= LPAREN SyllConstraintOr RPAREN MULT 
            {
              SyllConstraint RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		SyllConstraintOr e2 = (SyllConstraintOr)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		TreevialSymbol e3 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e4 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllConstraint(e1, e2, e3, e4); e2.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(11/*SyllConstraint*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SyllConstraint ::= SyllBasicPatternElement 
            {
              SyllConstraint RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		SyllBasicPatternElement e1 = (SyllBasicPatternElement)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllConstraint(e1); e1.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(11/*SyllConstraint*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SyllConstraint ::= LPAREN SyllConstraintOr RPAREN 
            {
              SyllConstraint RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		SyllConstraintOr e2 = (SyllConstraintOr)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e3 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllConstraint(e1, e2, e3); e2.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(11/*SyllConstraint*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SyllConstraintList ::= SyllConstraintList SyllConstraint 
            {
              SyllConstraintList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		SyllConstraintList e1 = (SyllConstraintList)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		SyllConstraint e2 = (SyllConstraint)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 e1.add(e2); RESULT = e1; e2.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(10/*SyllConstraintList*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SyllConstraintList ::= SyllConstraint 
            {
              SyllConstraintList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		SyllConstraint e1 = (SyllConstraint)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllConstraintList(e1); e1.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(10/*SyllConstraintList*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SyllConstraintOr ::= SyllConstraintOr OR SyllConstraintList 
            {
              SyllConstraintOr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		SyllConstraintOr e1 = (SyllConstraintOr)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		SyllConstraintList e2 = (SyllConstraintList)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 e1.add(e2); RESULT = e1; e2.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(9/*SyllConstraintOr*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SyllConstraintOr ::= SyllConstraintList 
            {
              SyllConstraintOr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		SyllConstraintList e1 = (SyllConstraintList)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new SyllConstraintOr(e1); e1.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(9/*SyllConstraintOr*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MeterNameDeclaration ::= NAME STRING_LITERAL SEMICOLON 
            {
              MeterNameDeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		TreevialSymbol e2 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e3 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new MeterNameDeclaration(e1, e2, e3); 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(8/*MeterNameDeclaration*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ThresholdDeclaration ::= THRESHOLD INTEGER_LITERAL SEMICOLON 
            {
              ThresholdDeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		TreevialSymbol e2 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e3 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new ThresholdDeclaration(e1, e2, e3); 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(7/*ThresholdDeclaration*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PriorityDeclaration ::= PRIORITY INTEGER_LITERAL SEMICOLON 
            {
              PriorityDeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		TreevialSymbol e2 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e3 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new PriorityDeclaration(e1, e2, e3); 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(6/*PriorityDeclaration*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MeterDescriptionMemberDeclaration ::= MeterNameDeclaration 
            {
              MeterDescriptionMemberDeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		MeterNameDeclaration e1 = (MeterNameDeclaration)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new MeterDescriptionMemberDeclaration(e1); e1.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(5/*MeterDescriptionMemberDeclaration*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MeterDescriptionMemberDeclaration ::= ThresholdDeclaration 
            {
              MeterDescriptionMemberDeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		ThresholdDeclaration e1 = (ThresholdDeclaration)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new MeterDescriptionMemberDeclaration(e1); e1.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(5/*MeterDescriptionMemberDeclaration*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MeterDescriptionMemberDeclaration ::= PriorityDeclaration 
            {
              MeterDescriptionMemberDeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		PriorityDeclaration e1 = (PriorityDeclaration)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new MeterDescriptionMemberDeclaration(e1); e1.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(5/*MeterDescriptionMemberDeclaration*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MeterDescriptionMemberDeclarationList ::= MeterDescriptionMemberDeclarationList MeterDescriptionMemberDeclaration 
            {
              MeterDescriptionMemberDeclarationList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		MeterDescriptionMemberDeclarationList e1 = (MeterDescriptionMemberDeclarationList)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		MeterDescriptionMemberDeclaration e2 = (MeterDescriptionMemberDeclaration)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 e1.add(e2); RESULT = e1; e2.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(4/*MeterDescriptionMemberDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MeterDescriptionMemberDeclarationList ::= MeterDescriptionMemberDeclaration 
            {
              MeterDescriptionMemberDeclarationList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		MeterDescriptionMemberDeclaration e1 = (MeterDescriptionMemberDeclaration)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new MeterDescriptionMemberDeclarationList(e1); e1.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(4/*MeterDescriptionMemberDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MeterDescription ::= METER IDENTIFIER LBRACE MeterDescriptionMemberDeclarationList SyllConstraintOr RBRACE 
            {
              MeterDescription RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-5)).right;
		TreevialSymbol e1 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-4)).right;
		TreevialSymbol e2 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).right;
		TreevialSymbol e3 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).right;
		MeterDescriptionMemberDeclarationList e4 = (MeterDescriptionMemberDeclarationList)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		SyllConstraintOr e5 = (SyllConstraintOr)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		TreevialSymbol e6 = (TreevialSymbol)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new MeterDescription(e1, e2, e3, e4, e5, e6);
       e4.parent = RESULT;
    
              CUP$MdlParser$result = new java_cup.runtime.Symbol(3/*MeterDescription*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MeterDescriptionList ::= MeterDescriptionList MeterDescription 
            {
              MeterDescriptionList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		MeterDescriptionList e1 = (MeterDescriptionList)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		MeterDescription e2 = (MeterDescription)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 e1.add(e2); RESULT = e1; e2.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(2/*MeterDescriptionList*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MeterDescriptionList ::= MeterDescription 
            {
              MeterDescriptionList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		MeterDescription e1 = (MeterDescription)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new MeterDescriptionList(e1); e1.parent = RESULT; 
              CUP$MdlParser$result = new java_cup.runtime.Symbol(2/*MeterDescriptionList*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CompilationUnit ::= MeterDescriptionList 
            {
              treeton.prosody.mdlcompiler.grammar.ast.CompilationUnit RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right;
		MeterDescriptionList e1 = (MeterDescriptionList)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).value;
		 RESULT = new treeton.prosody.mdlcompiler.grammar.ast.CompilationUnit(e1,
                      parser.getGrammarFile(), parser.getGrammarBody(), parser.getMdlCompiler());
      
              CUP$MdlParser$result = new java_cup.runtime.Symbol(1/*CompilationUnit*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          return CUP$MdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).right;
		treeton.prosody.mdlcompiler.grammar.ast.CompilationUnit start_val = (treeton.prosody.mdlcompiler.grammar.ast.CompilationUnit)((java_cup.runtime.Symbol) CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).value;
		RESULT = start_val;
              CUP$MdlParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MdlParser$stack.elementAt(CUP$MdlParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MdlParser$parser.done_parsing();
          return CUP$MdlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

