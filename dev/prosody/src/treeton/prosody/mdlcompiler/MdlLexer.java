/*
 * Copyright Anatoly Starostin (c) 2017.
 */

/* The following code was generated by JFlex 1.4.3 on 20.03.17 2:22 */

package treeton.prosody.mdlcompiler;

import treeton.prosody.mdlcompiler.grammar.*;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20.03.17 2:22 from the specification file
 * <tt>./resources/mdl.flex</tt>
 */
public class MdlLexer implements MdlSymbols, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 512000;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\12\1\6\1\5\1\0\1\6\1\4\16\12\4\0\1\6\1\0"+
    "\1\24\1\0\1\11\2\0\1\25\1\50\1\51\1\10\1\57\1\0"+
    "\1\23\1\21\1\7\1\1\1\16\2\15\4\17\2\2\1\0\1\54"+
    "\3\0\1\55\1\0\3\14\1\20\1\22\1\20\5\11\1\3\6\11"+
    "\1\45\1\11\1\46\2\11\1\13\2\11\1\0\1\26\2\0\1\11"+
    "\1\0\1\44\1\60\1\14\1\42\1\30\1\61\1\11\1\37\1\34"+
    "\2\11\1\41\1\27\1\43\1\35\1\33\1\11\1\32\1\40\1\31"+
    "\1\47\2\11\1\13\1\36\1\11\1\52\1\56\1\53\1\0\41\12"+
    "\2\0\4\11\4\0\1\11\2\0\1\12\7\0\1\11\4\0\1\11"+
    "\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0\14\11\16\0\5\11"+
    "\7\0\1\11\1\0\1\11\21\0\160\12\5\11\1\0\2\11\2\0"+
    "\4\11\10\0\1\11\1\0\3\11\1\0\1\11\1\0\24\11\1\0"+
    "\123\11\1\0\213\11\1\0\5\12\2\0\236\11\11\0\46\11\2\0"+
    "\1\11\7\0\47\11\7\0\1\11\1\0\55\12\1\0\1\12\1\0"+
    "\2\12\1\0\2\12\1\0\1\12\10\0\33\11\5\0\3\11\15\0"+
    "\5\12\6\0\1\11\4\0\13\12\5\0\53\11\37\12\4\0\2\11"+
    "\1\12\143\11\1\0\1\11\10\12\1\0\6\12\2\11\2\12\1\0"+
    "\4\12\2\11\12\12\3\11\2\0\1\11\17\0\1\12\1\11\1\12"+
    "\36\11\33\12\2\0\131\11\13\12\1\11\16\0\12\12\41\11\11\12"+
    "\2\11\4\0\1\11\5\0\26\11\4\12\1\11\11\12\1\11\3\12"+
    "\1\11\5\12\22\0\31\11\3\12\104\0\1\11\1\0\13\11\67\0"+
    "\33\12\1\0\4\12\66\11\3\12\1\11\22\12\1\11\7\12\12\11"+
    "\2\12\2\0\12\12\1\0\7\11\1\0\7\11\1\0\3\12\1\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3\0"+
    "\4\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12\1\11"+
    "\10\0\1\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\4\11"+
    "\7\0\1\11\5\0\3\12\1\0\6\11\4\0\2\11\2\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\12"+
    "\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12\7\0\4\11"+
    "\1\0\1\11\7\0\14\12\3\11\1\12\13\0\3\12\1\0\11\11"+
    "\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\2\0\1\12\1\11\10\12\1\0\3\12\1\0\3\12\2\0\1\11"+
    "\17\0\2\11\2\12\2\0\12\12\1\0\1\11\17\0\3\12\1\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0"+
    "\5\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12\10\0"+
    "\2\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\1\0\1\11"+
    "\20\0\1\12\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0"+
    "\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0"+
    "\14\11\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\11\6\0"+
    "\1\12\16\0\12\12\11\0\1\11\7\0\3\12\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\12\11\1\0\5\11\3\0\1\11\7\12"+
    "\1\0\3\12\1\0\4\12\7\0\2\12\1\0\2\11\6\0\2\11"+
    "\2\12\2\0\12\12\22\0\2\12\1\0\10\11\1\0\3\11\1\0"+
    "\27\11\1\0\12\11\1\0\5\11\2\0\1\12\1\11\7\12\1\0"+
    "\3\12\1\0\4\12\7\0\2\12\7\0\1\11\1\0\2\11\2\12"+
    "\2\0\12\12\1\0\2\11\17\0\2\12\1\0\10\11\1\0\3\11"+
    "\1\0\51\11\2\0\1\11\7\12\1\0\3\12\1\0\4\12\1\11"+
    "\10\0\1\12\10\0\2\11\2\12\2\0\12\12\12\0\6\11\2\0"+
    "\2\12\1\0\22\11\3\0\30\11\1\0\11\11\1\0\1\11\2\0"+
    "\7\11\3\0\1\12\4\0\6\12\1\0\1\12\1\0\10\12\22\0"+
    "\2\12\15\0\60\11\1\12\2\11\7\12\4\0\10\11\10\12\1\0"+
    "\12\12\47\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\0\4\11\1\12\2\11\6\12\1\0\2\12"+
    "\1\11\2\0\5\11\1\0\1\11\1\0\6\12\2\0\12\12\2\0"+
    "\4\11\40\0\1\11\27\0\2\12\6\0\12\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\4\0\2\12\10\11\1\0\44\11\4\0\24\12"+
    "\1\0\2\12\5\11\13\12\1\0\44\12\11\0\1\12\71\0\53\11"+
    "\24\12\1\11\12\12\6\0\6\11\4\12\4\11\3\12\1\11\3\12"+
    "\2\11\7\12\3\11\4\12\15\11\14\12\1\11\17\12\2\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11"+
    "\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11"+
    "\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11"+
    "\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\12"+
    "\40\0\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11\1\0\32\11"+
    "\5\0\113\11\3\0\3\11\17\0\15\11\1\0\4\11\3\12\13\0"+
    "\22\11\3\12\13\0\22\11\2\12\14\0\15\11\1\0\3\11\1\0"+
    "\2\12\14\0\64\11\40\12\3\0\1\11\3\0\2\11\1\12\2\0"+
    "\12\12\41\0\3\12\2\0\12\12\6\0\130\11\10\0\51\11\1\12"+
    "\1\11\5\0\106\11\12\0\35\11\3\0\14\12\4\0\14\12\12\0"+
    "\12\12\36\11\2\0\5\11\13\0\54\11\4\0\21\12\7\11\2\12"+
    "\6\0\12\12\46\0\27\11\5\12\4\0\65\11\12\12\1\0\35\12"+
    "\2\0\13\12\6\0\12\12\15\0\1\11\130\0\5\12\57\11\21\12"+
    "\7\11\4\0\12\12\21\0\11\12\14\0\3\12\36\11\15\12\2\11"+
    "\12\12\54\11\16\12\14\0\44\11\24\12\10\0\12\12\3\0\3\11"+
    "\12\12\44\11\122\0\3\12\1\0\25\12\4\11\1\12\4\11\3\12"+
    "\2\11\11\0\300\11\47\12\25\0\4\12\u0116\11\2\0\6\11\2\0"+
    "\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0\1\11\3\0"+
    "\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11\5\0"+
    "\3\11\1\0\7\11\16\0\5\12\32\0\5\12\20\0\2\11\23\0"+
    "\1\11\13\0\5\12\5\0\6\12\1\0\1\11\15\0\1\11\20\0"+
    "\15\11\3\0\33\11\25\0\15\12\4\0\1\12\3\0\14\12\21\0"+
    "\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\13\11\2\0"+
    "\4\11\5\0\5\11\4\0\1\11\21\0\51\11\u0a77\0\57\11\1\0"+
    "\57\11\1\0\205\11\6\0\4\11\3\12\2\11\14\0\46\11\1\0"+
    "\1\11\5\0\1\11\2\0\70\11\7\0\1\11\17\0\1\12\27\11"+
    "\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\12\57\0\1\11"+
    "\u01d5\0\3\11\31\0\11\11\6\12\1\0\5\11\2\0\5\11\4\0"+
    "\126\11\2\0\2\12\2\0\3\11\1\0\132\11\1\0\4\11\5\0"+
    "\51\11\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11\112\0"+
    "\u51cd\11\63\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11\12\12"+
    "\2\11\24\0\57\11\1\12\4\0\12\12\1\0\31\11\7\0\1\12"+
    "\120\11\2\12\45\0\11\11\2\0\147\11\2\0\4\11\1\0\4\11"+
    "\14\0\13\11\115\0\12\11\1\12\3\11\1\12\4\11\1\12\27\11"+
    "\5\12\20\0\1\11\7\0\64\11\14\0\2\12\62\11\21\12\13\0"+
    "\12\12\6\0\22\12\6\11\3\0\1\11\4\0\12\12\34\11\10\12"+
    "\2\0\27\11\15\12\14\0\35\11\3\0\4\12\57\11\16\12\16\0"+
    "\1\11\12\12\46\0\51\11\16\12\11\0\3\11\1\12\10\11\2\12"+
    "\2\0\12\12\6\0\27\11\3\0\1\11\1\12\4\0\60\11\1\12"+
    "\1\11\3\12\2\11\2\12\5\11\2\12\1\11\1\12\1\11\30\0"+
    "\3\11\2\0\13\11\5\12\2\0\3\11\2\12\12\0\6\11\2\0"+
    "\6\11\2\0\6\11\11\0\7\11\1\0\7\11\221\0\43\11\10\12"+
    "\1\0\2\12\2\0\12\12\6\0\u2ba4\11\14\0\27\11\4\0\61\11"+
    "\u2104\0\u016e\11\2\0\152\11\46\0\7\11\14\0\5\11\5\0\1\11"+
    "\1\12\12\11\1\0\15\11\1\0\5\11\1\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11\2\0\66\11"+
    "\50\0\15\11\3\0\20\12\20\0\7\12\14\0\2\11\30\0\3\11"+
    "\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\12\4\0\1\11"+
    "\13\0\12\12\7\0\32\11\4\0\1\11\1\0\32\11\13\0\131\11"+
    "\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0\2\11"+
    "\3\0\2\11\22\0\3\12\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\2\4\1\1\1\5\1\1"+
    "\1\6\1\7\3\3\1\10\1\3\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\2\25\1\26\2\1\2\27\1\1\1\30\1\31"+
    "\1\32\1\0\3\30\1\33\1\31\1\0\1\4\1\0"+
    "\4\3\1\34\2\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\12\34\1\47\2\50\2\30"+
    "\1\31\2\0\4\3\1\35\1\0\1\51\1\0\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\50\2\30\3\3\1\63\1\50\2\30\1\64\2\3"+
    "\1\50\2\30\2\3\1\50\2\30\2\3\1\50\2\30"+
    "\1\3\1\65\1\50\2\30\1\66\1\50\2\30\1\0"+
    "\2\30\1\0\2\30\1\0\2\30\1\0\2\30\1\0"+
    "\2\30\1\0\2\30\1\0\1\30\1\31\1\0\5\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\226\0\u0190\0\226\0\u01c2\0\226\0\226\0\u01f4\0\u0226"+
    "\0\u0258\0\u012c\0\u028a\0\u012c\0\u012c\0\u012c\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\u02bc\0\u02ee"+
    "\0\226\0\226\0\u0320\0\u0352\0\u0384\0\226\0\u03b6\0\u03e8"+
    "\0\u041a\0\226\0\u044c\0\u047e\0\u04b0\0\u04e2\0\226\0\u0514"+
    "\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\226"+
    "\0\u06a4\0\u06d6\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\226\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\226\0\u073a\0\226\0\u0b22\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u012c\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u012c\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u012c\0\u1036\0\u1068\0\u109a\0\u012c\0\u10cc\0\u10fe"+
    "\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13"+
    "\1\7\1\4\2\7\3\6\1\7\1\14\1\7\1\4"+
    "\1\15\1\16\1\4\1\17\1\7\1\20\1\7\1\21"+
    "\4\7\1\22\2\7\1\23\1\7\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\7\4\37\1\40\1\41\16\37\1\42\1\37\1\43"+
    "\33\37\4\44\1\45\1\46\17\44\1\4\1\47\33\44"+
    "\63\0\1\50\1\51\1\52\7\0\1\53\1\0\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\5\0\1\61\10\0"+
    "\1\52\1\57\16\0\1\57\1\0\2\6\1\52\11\0"+
    "\3\6\1\57\1\60\1\61\5\0\1\61\10\0\1\52"+
    "\1\57\16\0\1\57\1\0\3\7\5\0\10\7\1\0"+
    "\1\7\4\0\21\7\10\0\2\7\5\0\1\11\63\0"+
    "\1\62\1\63\52\0\2\60\12\0\3\60\43\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\1\7\1\64\17\7"+
    "\10\0\2\7\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\10\7\1\65\10\7\10\0\2\7\1\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\3\7\1\66\15\7"+
    "\10\0\2\7\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\15\7\1\67\3\7\10\0\2\7\4\37\2\0"+
    "\16\37\1\0\1\37\1\0\33\37\5\0\1\41\54\0"+
    "\1\70\1\71\3\70\1\0\7\70\2\71\1\72\4\70"+
    "\1\73\1\74\1\75\2\70\1\76\1\77\10\70\1\100"+
    "\14\70\1\101\1\102\25\0\1\103\41\0\1\46\54\0"+
    "\1\70\1\104\3\70\1\0\7\70\2\104\1\105\4\70"+
    "\1\106\1\107\1\110\2\70\1\111\1\112\10\70\1\113"+
    "\14\70\1\114\1\115\1\0\1\50\1\51\1\116\11\0"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\5\0\1\61"+
    "\10\0\1\116\1\57\16\0\1\57\1\0\2\51\12\0"+
    "\3\51\1\57\1\60\1\61\5\0\1\61\11\0\1\57"+
    "\16\0\1\57\1\0\1\117\1\120\11\0\5\120\1\0"+
    "\1\120\5\0\1\120\11\0\1\120\1\0\1\120\13\0"+
    "\2\120\1\0\1\121\1\51\1\116\11\0\3\121\1\57"+
    "\1\60\1\61\5\0\1\61\10\0\1\116\1\57\16\0"+
    "\1\57\1\0\1\56\1\51\1\116\11\0\3\56\1\57"+
    "\1\60\1\61\5\0\1\61\10\0\1\116\1\57\16\0"+
    "\1\57\1\0\1\122\1\51\1\116\11\0\3\122\1\57"+
    "\1\60\1\61\5\0\1\61\10\0\1\116\1\57\16\0"+
    "\1\57\1\0\2\60\12\0\3\60\1\57\1\0\1\61"+
    "\5\0\1\61\11\0\1\57\16\0\1\57\1\0\2\123"+
    "\12\0\3\123\3\0\1\124\33\0\1\124\2\0\4\62"+
    "\1\10\1\11\54\62\10\63\1\125\51\63\1\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\2\7\1\126\16\7"+
    "\10\0\2\7\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\3\7\1\127\15\7\10\0\2\7\1\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\5\7\1\130\13\7"+
    "\10\0\2\7\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\1\131\20\7\10\0\2\7\1\0\1\72\13\0"+
    "\3\72\43\0\1\132\13\0\3\132\43\0\1\133\13\0"+
    "\3\133\5\0\1\134\35\0\1\135\13\0\3\135\5\0"+
    "\1\134\61\0\1\136\61\0\1\137\61\0\1\140\61\0"+
    "\1\141\61\0\1\142\61\0\1\143\61\0\1\144\61\0"+
    "\1\145\35\0\1\117\1\120\1\146\10\0\5\120\1\0"+
    "\1\120\5\0\1\120\10\0\1\146\1\120\1\0\1\120"+
    "\13\0\2\120\1\0\2\147\1\146\10\0\5\147\1\0"+
    "\1\147\5\0\1\147\10\0\1\146\1\147\1\0\1\147"+
    "\13\0\2\147\1\0\1\150\1\51\1\116\11\0\3\150"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\1\151\1\51\1\116\11\0\3\151"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\2\123\12\0\3\123\1\57\21\0"+
    "\1\57\16\0\1\57\1\0\2\123\12\0\3\123\42\0"+
    "\7\63\1\11\1\125\51\63\1\0\3\7\5\0\10\7"+
    "\1\0\1\7\4\0\1\7\1\152\17\7\10\0\2\7"+
    "\1\0\3\7\5\0\10\7\1\0\1\7\4\0\1\7"+
    "\1\153\17\7\10\0\2\7\1\0\3\7\5\0\10\7"+
    "\1\0\1\7\4\0\6\7\1\154\12\7\10\0\2\7"+
    "\1\0\3\7\5\0\10\7\1\0\1\7\4\0\1\7"+
    "\1\155\17\7\10\0\2\7\25\0\1\134\35\0\2\156"+
    "\1\146\10\0\5\156\1\0\1\156\5\0\1\156\10\0"+
    "\1\146\1\156\1\0\1\156\13\0\2\156\1\0\1\157"+
    "\1\51\1\116\11\0\3\157\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\160"+
    "\1\51\1\116\11\0\3\160\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\3\7\1\161\15\7"+
    "\10\0\2\7\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\11\7\1\162\7\7\10\0\2\7\1\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\3\7\1\163\15\7"+
    "\10\0\2\7\1\0\2\164\1\146\10\0\5\164\1\0"+
    "\1\164\5\0\1\164\10\0\1\146\1\164\1\0\1\164"+
    "\13\0\2\164\1\0\1\165\1\51\1\116\11\0\3\165"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\1\166\1\51\1\116\11\0\3\166"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\10\7\1\167\10\7\10\0\2\7\1\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\5\7\1\170\13\7"+
    "\10\0\2\7\1\0\2\171\1\146\10\0\5\171\1\0"+
    "\1\171\5\0\1\171\10\0\1\146\1\171\1\0\1\171"+
    "\13\0\2\171\1\0\1\172\1\51\1\116\11\0\3\172"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\1\173\1\51\1\116\11\0\3\173"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\6\7\1\174\12\7\10\0\2\7\1\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\2\7\1\175\16\7"+
    "\10\0\2\7\1\0\2\176\1\146\10\0\5\176\1\0"+
    "\1\176\5\0\1\176\10\0\1\146\1\176\1\0\1\176"+
    "\13\0\2\176\1\0\1\177\1\51\1\116\11\0\3\177"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\1\200\1\51\1\116\11\0\3\200"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\12\7\1\201\6\7\10\0\2\7\1\0\3\7"+
    "\5\0\10\7\1\0\1\7\4\0\7\7\1\202\11\7"+
    "\10\0\2\7\1\0\2\203\1\146\10\0\5\203\1\0"+
    "\1\203\5\0\1\203\10\0\1\146\1\203\1\0\1\203"+
    "\13\0\2\203\1\0\1\204\1\51\1\116\11\0\3\204"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\1\205\1\51\1\116\11\0\3\205"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\3\7\5\0\10\7\1\0\1\7"+
    "\4\0\13\7\1\206\5\7\10\0\2\7\1\0\2\207"+
    "\1\146\10\0\5\207\1\0\1\207\5\0\1\207\10\0"+
    "\1\146\1\207\1\0\1\207\13\0\2\207\1\0\1\210"+
    "\1\51\1\116\11\0\3\210\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\211"+
    "\1\51\1\116\11\0\3\211\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\2\212"+
    "\1\146\10\0\5\212\1\0\1\212\5\0\1\212\10\0"+
    "\1\146\1\212\1\0\1\212\13\0\2\212\1\0\1\213"+
    "\1\51\1\116\11\0\3\213\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\214"+
    "\1\51\1\116\11\0\3\214\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\2\215"+
    "\1\146\10\0\5\215\1\0\1\215\5\0\1\215\10\0"+
    "\1\146\1\215\1\0\1\215\13\0\2\215\1\0\1\216"+
    "\1\51\1\116\11\0\3\216\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\217"+
    "\1\51\1\116\11\0\3\217\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\2\220"+
    "\1\146\10\0\5\220\1\0\1\220\5\0\1\220\10\0"+
    "\1\146\1\220\1\0\1\220\13\0\2\220\1\0\1\221"+
    "\1\51\1\116\11\0\3\221\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\222"+
    "\1\51\1\116\11\0\3\222\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\2\223"+
    "\1\146\10\0\5\223\1\0\1\223\5\0\1\223\10\0"+
    "\1\146\1\223\1\0\1\223\13\0\2\223\1\0\1\224"+
    "\1\51\1\116\11\0\3\224\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\225"+
    "\1\51\1\116\11\0\3\225\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\2\226"+
    "\1\146\10\0\5\226\1\0\1\226\5\0\1\226\10\0"+
    "\1\146\1\226\1\0\1\226\13\0\2\226\1\0\1\227"+
    "\1\51\1\116\11\0\3\227\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\230"+
    "\1\51\1\116\11\0\3\230\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\2\231"+
    "\1\146\10\0\5\231\1\0\1\231\5\0\1\231\10\0"+
    "\1\146\1\231\1\0\1\231\13\0\2\231\1\0\1\232"+
    "\1\51\1\116\11\0\3\232\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\233"+
    "\1\51\1\116\11\0\3\233\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\2\234"+
    "\1\146\10\0\5\234\1\0\1\234\5\0\1\234\10\0"+
    "\1\146\1\234\1\0\1\234\13\0\2\234\1\0\1\235"+
    "\1\51\1\116\11\0\3\235\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\1\236"+
    "\1\51\1\116\11\0\3\236\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\1\0\2\237"+
    "\1\146\10\0\5\237\1\0\1\237\5\0\1\237\10\0"+
    "\1\146\1\237\1\0\1\237\13\0\2\237\1\0\1\240"+
    "\1\51\1\116\11\0\3\240\1\57\1\60\1\61\5\0"+
    "\1\61\10\0\1\116\1\57\16\0\1\57\3\0\1\146"+
    "\35\0\1\146\21\0\1\241\1\51\1\116\11\0\3\241"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\1\242\1\51\1\116\11\0\3\242"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\1\243\1\51\1\116\11\0\3\243"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\1\244\1\51\1\116\11\0\3\244"+
    "\1\57\1\60\1\61\5\0\1\61\10\0\1\116\1\57"+
    "\16\0\1\57\1\0\2\51\1\116\11\0\3\51\1\57"+
    "\1\60\1\61\5\0\1\61\10\0\1\116\1\57\16\0"+
    "\1\57";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\1\1\1\11\1\1\2\11"+
    "\10\1\10\11\2\1\2\11\3\1\1\11\3\1\1\11"+
    "\1\0\3\1\1\11\1\1\1\0\1\1\1\0\4\1"+
    "\1\11\2\1\11\11\12\1\1\11\5\1\2\0\4\1"+
    "\1\11\1\0\1\11\1\0\11\11\43\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return symbol(type, null);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, zzStartRead, zzMarkedPos,
                      new TreevialSymbol(type, yyline+1, yycolumn+1, zzStartRead, zzMarkedPos, value));
  }

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MdlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\"'));
          }
        case 55: break;
        case 4: 
          { /* ignore */
          }
        case 56: break;
        case 25: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 57: break;
        case 37: 
          { string.append( '\f' );
          }
        case 58: break;
        case 2: 
          { return symbol(INTEGER_LITERAL, new Long(yytext()));
          }
        case 59: break;
        case 17: 
          { return symbol(QUESTION, new String("?"));
          }
        case 60: break;
        case 46: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\r'));
          }
        case 61: break;
        case 44: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\\'));
          }
        case 62: break;
        case 39: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
          }
        case 63: break;
        case 36: 
          { string.append( '\b' );
          }
        case 64: break;
        case 5: 
          { return symbol(MULT, new String("*"));
          }
        case 65: break;
        case 47: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\n'));
          }
        case 66: break;
        case 53: 
          { return symbol(PRIORITY, new String("priority"));
          }
        case 67: break;
        case 33: 
          { string.append( '\t' );
          }
        case 68: break;
        case 31: 
          { string.append( '\'' );
          }
        case 69: break;
        case 10: 
          { return symbol(OBLIGATORY_UNSTRESSED, new String("U"));
          }
        case 70: break;
        case 9: 
          { return symbol(OBLIGATORY_STRESSED, new String("S"));
          }
        case 71: break;
        case 21: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 72: break;
        case 49: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\f'));
          }
        case 73: break;
        case 50: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
          }
        case 74: break;
        case 3: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 75: break;
        case 13: 
          { return symbol(RPAREN, new String(")"));
          }
        case 76: break;
        case 19: 
          { return symbol(PLUS, new String("+"));
          }
        case 77: break;
        case 26: 
          { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 78: break;
        case 41: 
          { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, new Character((char)val));
          }
        case 79: break;
        case 11: 
          { return symbol(UNSTRESSED, new String("u"));
          }
        case 80: break;
        case 48: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\b'));
          }
        case 81: break;
        case 45: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\t'));
          }
        case 82: break;
        case 8: 
          { return symbol(STRESSED, new String("s"));
          }
        case 83: break;
        case 29: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
          }
        case 84: break;
        case 52: 
          { return symbol(METER, new String("meter"));
          }
        case 85: break;
        case 43: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\''));
          }
        case 86: break;
        case 30: 
          { string.append( '\"' );
          }
        case 87: break;
        case 14: 
          { return symbol(LBRACE, new String("{"));
          }
        case 88: break;
        case 23: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 89: break;
        case 51: 
          { return symbol(NAME, new String("name"));
          }
        case 90: break;
        case 16: 
          { return symbol(SEMICOLON, new String(";"));
          }
        case 91: break;
        case 34: 
          { string.append( '\r' );
          }
        case 92: break;
        case 6: 
          { yybegin(STRING); string.setLength(0);
          }
        case 93: break;
        case 32: 
          { string.append( '\\' );
          }
        case 94: break;
        case 24: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength(), 8)));
          }
        case 95: break;
        case 54: 
          { return symbol(THRESHOLD, new String("threshold"));
          }
        case 96: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 97: break;
        case 12: 
          { return symbol(LPAREN, new String("("));
          }
        case 98: break;
        case 35: 
          { string.append( '\n' );
          }
        case 99: break;
        case 18: 
          { return symbol(OR, new String("|"));
          }
        case 100: break;
        case 22: 
          { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
          }
        case 101: break;
        case 27: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 102: break;
        case 20: 
          { string.append( yytext() );
          }
        case 103: break;
        case 40: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength(), 16)));
          }
        case 104: break;
        case 28: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 105: break;
        case 38: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(yytext().charAt(0)));
          }
        case 106: break;
        case 15: 
          { return symbol(RBRACE, new String("}"));
          }
        case 107: break;
        case 7: 
          { yybegin(CHARLITERAL);
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
